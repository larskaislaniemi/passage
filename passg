#!/usr/bin/sh

set -eu -o noglob


### CONFIG VARIABLES

DIRSUFFIX="passg"
SIGNATURE_NAMESPACE="passg"
TMPDIR="/tmp" # modified on start
LOGFILE="${TMPDIR}/passg.log" # modified on start
EDITOR=${EDITOR:-vi} # YES!
ROOTDIR="." # modified by command line arguments

MYSECKEY="" #"${HOME}/.ssh/id_ed25519"
MYALLOWEDSIGNERS="" #"${HOME}/.config/passg/allowed_signers"

SAFE_UMASK="077"

### RUNTIME GLOBAL VARIABLES

STATE_RUNDIR="/tmp" # modified on start
STATE_UMASK="777" # modified on start
SAVELOG="0"


### HELPER ROUTINES

passg__shred_recursive() {
	# arguments:
	# - dir/filename
	# output: none
	# returns via exit(), run in a subshell!

	local f="$1"
	local dummy
	local frec

	if [ -f "$f" ]; then
		shred "$f"
		rm -f "$f"
		exit 0
	fi

	if [ -d "$f" ]; then
		local d=$(realpath "$f")
		local n=$(find "$f" -type f | wc -l)

		if [ "$n" -gt 10 ]; then
			echo "WARNING: Skipping shredding of $f -- too many files" >&2
			exit 1
		fi

		if [ "$d" = "/" ]; then
			echo "WARNING: Skipping shredding of $f -- it's the root..." >&2
			exit 1
		fi

		find "$d" -type f | while read frec; do
			shred "$frec"
			rm -f "$frec"
		done

		rm -fr "$d"

		exit 0
	fi

	exit 1
}

passg__sighandler() {
	if [ "$SAVELOG" -eq "1" ]; then
		if [ -f "$LOGFILE" ]; then
			local f
			f=$(mkdtemp)
			cat "$LOGFILE" > "$f"
			echo "Log file saved at ${f}" >&2
		else
			echo "No log file to save" >&2
		fi
	fi
	(passg__shred_recursive "$TMPDIR") || echo "Failed to clean $TMPDIR" >&2
	cd "$STATE_RUNDIR"
	umask "$STATE_UMASK"
}

passg__require_seckey() {
	# arguments: none
	# uses global MYSECKEY

	if [ "$MYSECKEY" = "" ]; then
		echo "Required secret key file not set" >&2
		return 1
	fi

	if [ ! -f "$MYSECKEY" ]; then
		echo "Required secret key file not found, tried: $MYSECKEY" >&2
		return 1
	fi

	return 0
}

passg__require_allowedsigners() {
	# arguments: none
	# uses global MYALLOWEDSIGNERS

	if [ "$MYALLOWEDSIGNERS" = "" ]; then
		echo "Required allowed signers file not set" >&2
		return 1
	fi

	if [ ! -f "$MYALLOWEDSIGNERS" ]; then
		echo "Required allowed signers file not found, tried: $MYALLOWEDSIGNERS" >&2
		return 1
	fi

	return 0
}

passg__normal_umask() {
	umask "$STATE_UMASK"
}

passg__safe_umask() {
	umask "$SAFE_UMASK"
}

passg__calcentropy() {
	# arguments:
	# - length
	# - charset

	local len
	local charset
	local allchar
	local c s n e

	len="$1"
	charset="$2"

	allchar=""

	for c in $(seq 0 255); do
		s=$(printf \\$(printf '%03o' $c))
		allchar="${allchar}$s"
	done
	allchar="$(echo "$allchar" | tr -d -c "$charset")"
	n=$(expr length "$allchar")
	e=$(echo "l(${n}^${len})/l(2)" | bc -l)
	echo "Entropy: ${e} bits" >&2
}

passg__genpwd() {
	# arguments:
	# - length (optional)
	# - character set (optional), as set for `tr`

	local pw
	local len
	local charset
	len="16"
	charset="a-zA-Z0-9"

	if [ "$#" -gt 0 ]; then
		len="$1"
		shift
	fi

	if [ "$#" -gt 0 ]; then
		charset="$1"
		shift
	fi

	pw=""
	while [ $(expr length "$pw") -lt "$len" ]; do
		pwadd=$(dd if=/dev/urandom bs=1 count=$((len)) \
			| tr -d -c "$charset" | dd bs=1 count="$len") 2> /dev/null
		pw="${pw}${pwadd}" 
	done
	pw="$(echo "$pw" | dd bs=1 count="$len" 2>/dev/null)"

	echo "$pw"
	passg__calcentropy "$len" "$charset"
}

passg__stripsuffix() {
	# in case user happened to use the suffix, strip it

	if [ "$#" -lt 1 ]; then
		echo ""
		return 0
	fi

	local s
	s="$1"
	s="${s%"/"}"
	s="${s%".${DIRSUFFIX}"}"
	echo "$s"
	return 0
}

### ATOMIC OPERATIONS

passg_encrypt_secret() {
	# arguments:
	# - secretname
	# - recipients filename

	local secretname="$1"
	local recipients_filename="$2"
	local tmpsecret

	# TODO: check existence / lock file; might also be open for myself

	passg__require_seckey

	secretname="$(passg__stripsuffix "$secretname")"

	passg__safe_umask
	tmpsecret=$(mktemp -d -p "$TMPDIR")

	cp "$recipients_filename" "${tmpsecret}/recips"

	ssh-keygen -Y sign -f "${MYSECKEY}" -n "${SIGNATURE_NAMESPACE}" \
		"${tmpsecret}/recips" \
		>> "$LOGFILE" 2>> "$LOGFILE" || {
		echo "ERROR: Signing of recipients file failed" >&2
		return 1
	}
	age -R "${tmpsecret}/recips" > "${tmpsecret}/secret" \
		2>> "$LOGFILE" || {
		echo "ERROR: Encryption of secret failed" >&2
		return 1
	}
	passg__normal_umask
	mkdir -p "${secretname}.${DIRSUFFIX}"
	for f in recips recips.sig secret; do
		rm -f "${secretname}.${DIRSUFFIX}/${f}"
		cat "${tmpsecret}/${f}" > "${secretname}.${DIRSUFFIX}/${f}"
	done

	passg__safe_umask

	(passg__shred_recursive "$tmpsecret")

	return 0
}

passg_show_secret() {
	# arguments:
	# - secretname

	local secretname="$1"

	passg__require_seckey 

	secretname="$(passg__stripsuffix "$secretname")"

	age --decrypt -i "${MYSECKEY}" "${secretname}.${DIRSUFFIX}/secret" \
		2>> "$LOGFILE" || {
		echo "ERROR: Decryption of secret failed" >&2
		return 1
	}

	return 0
}

passg_show_recipients() {
	# arguments
	# - secretname

	local signedprincipal
	local isvalidsig="0"
	local secretname="$1"

	passg__require_allowedsigners 

	secretname="$(passg__stripsuffix "$secretname")"

	signedprincipal=$(ssh-keygen -Y find-principals \
		-s "${secretname}.${DIRSUFFIX}/recips.sig" \
		-f "${MYALLOWEDSIGNERS}" 2>> "$LOGFILE") || {
		echo "ERROR: Couldn't find the signer's principal in allowed signers list" >&2
		return 1
	}

	echo "# Signer is: $signedprincipal" >&2

	ssh-keygen -Y verify -f "${MYALLOWEDSIGNERS}" -I "${signedprincipal}" \
		-n "${SIGNATURE_NAMESPACE}" -s "${secretname}.${DIRSUFFIX}/recips.sig" \
		>> "$LOGFILE" 2>> "$LOGFILE" < "${secretname}.${DIRSUFFIX}/recips" \
		&& isvalidsig="1"
	# TODO: use option -r revocation_file for ssh-keygen -Y verify

	if [ "$isvalidsig" -ne "1" ]; then
		echo "ERROR: Could not verify signature for recipients list" >&2
		return 1
	fi

	cat "${secretname}.${DIRSUFFIX}/recips"
	
	return 0
}


### COMBINED OPERATIONS

passg_update_secret() {
	# arguments
	# - secretname

	local secretname="$1"
	local tmpsecret

	secretname="$(passg__stripsuffix "$secretname")"

	# this reads from stdin, i.e. user input
	passg_encrypt_secret "$secretname" "${secretname}.${DIRSUFFIX}/recips" 
}

passg_modify_secret() {
	# arguments
	# - secretname

	local secretname="$1"
	local tmpsecret

	echo "ERROR: Not implemented." >&2

	false

	#secretname="$(passg__stripsuffix "$secretname")"

	#tmpsecret=$(passg__open_secret "$secretname") 

	#"$EDITOR" "${tmpsecret}/secret.plain"

	#passg_encrypt_secret "$secretname" "${tmpsecret}/recips" \
	#	< "${tmpsecret}/secret.plain"

	#passg__close_secret "$tmpsecret" 
}

passg_update_recipients() {
	# arguments
	# - secretname

	local secretname="$1"

	passg__require_seckey

	passg__safe_umask
	cat > "${TMPDIR}/recips"

	secretname="$(passg__stripsuffix "$secretname")"

	passg_show_secret "$secretname" | passg_encrypt_secret "$secretname" "${TMPDIR}/recips" 
}

passg_modify_recipients() {
	# arguments
	# - secretname

	local secretname="$1"
	local tmpsecret

	echo "ERROR: Not implemented." >&2

	false

	#secretname="$(passg__stripsuffix "$secretname")"

	#tmpsecret=$(passg__open_secret "$secretname")

	#"$EDITOR" "${tmpsecret}/recips"

	#passg_encrypt_secret "$secretname" "${tmpsecret}/recips" \
	#	< "${tmpsecret}/secret.plain"

	#passg__close_secret "$tmpsecret" 
}


### OTHER SUBROUTINES

passg_list_secrets() {
	# arguments: none

	find "$ROOTDIR/" -type d -name "*.${DIRSUFFIX}" | while read d; do
		if [ -f "${d}/secret" ] && [ -f "${d}/recips" ]; then
			local path
			path=${d#"${ROOTDIR}/"}
			path=${path%".${DIRSUFFIX}"}
			echo "${path}"
		else
			continue
		fi
	done
}

passg_usage() {
	cat<<EOF
PASSG

	Multi-user password store using age(1) and SSH keys.

Usage:
	passg [options] <command> [<command-arguments>]

Options:

	-k <file>	location of private SSH key file 
	-R <dir>	do operations relative to root dir <dir>
	-s <file>	location of allowed signers file

	SSH key files should be in format accepted by age(1).

	Allowed signers is a list of public keys that are accepted as signers
	of the recipients list. The format of this file is described in
	ssh-keygen(1) manual page, ALLOWED SIGNERS section.

Commands:

	encrypt-secret <secret-path> <recipients-file>

		Encrypt the secret given via STDIN to recipients listed
		in <recipients-file>. <recipients-file> is a file containing
		the SSH keys, one per line, to whom the secret is encrypted.

	show-secret <secret-path>

		Show the secret in <secret-path>. Requires option: -k.

	show-recipients <secret-path>

		Show recipients, i.e. SSH keys, to whom the secret has been
		encrypted. Requires option: -s.

	list-secrets

		List secrets found under the current working directory.

	modify-secret <secret-path>

		Open an editor to modify the secret. Use environment variable 
		EDITOR 	to change the editor. Requires options: -k, -s.

	update-secret <secret-path>

		Read a new secret from STDIN and overwrite the old. Does not
		change the recipients. Requires options: -k, -s.

	modify-recipients

		Open an editor to modify the list of recipients. Use 
		environment variable EDITOR to change the editor. Requires 
		options: -k, -s.

	update-recipients

		Read a new list of recipients from STDIN and overwrite the 
		old. Does not affect the contents of the secret. Requires 
		options: -k, -s.

	genpwd [length] [charset]

		Helper tool to create new passwords. Optional parameters are
		length and charset to use (as defined in tr(1), SETs).

EOF
}


############
### MAIN ###
############

TMPDIR="$(mktemp -d)"
LOGFILE="${TMPDIR}/passg.log"
STATE_RUNDIR=$(pwd)
STATE_UMASK=$(umask)


umask "$SAFE_UMASK"
trap passg__sighandler EXIT


# Command line options - parsing

while getopts 'R:k:p:s:' arg; do
	case $arg in
	k)
		MYSECKEY="$OPTARG"
		;;
	R) 
		ROOTDIR="$OPTARG"
		;;
	s)
		MYALLOWEDSIGNERS="$OPTARG"
		;;
	*)
		passg_usage
		exit 1
		;;
	esac
done
shift $((OPTIND-1))


# Options - sanity check
# - sanity of private key filenames is checked ad-hoc
# - sanity of allowed-signers file is checked ad-hoc


if [ ! -d "$ROOTDIR" ]; then
	echo "Root dir is not a directory" >&2
	exit 1
fi
ROOTDIR=$(realpath $ROOTDIR)
ROOTDIR="${ROOTDIR%"/"}"


# Prepare environment

cd "$ROOTDIR"


# Parse commands

if [ "$#" -lt 1 ]; then
	passg_usage
	exit 1
fi

cmd="$1"
shift

case "$cmd" in
encrypt-secret)
	passg_encrypt_secret $@ 
	;;
show-secret)
	passg_show_secret $@ 
	;;
show-recipients)
	passg_show_recipients $@
	;;
list-secrets)
	passg_list_secrets $@ 
	;;
modify-secret)
	passg_modify_secret $@
	;;
update-secret)
	passg_update_secret $@
	;;
modify-recipients)
	passg_modify_recipients $@ 
	;;
update-recipients)
	passg_update_recipients $@ 
	;;
genpwd)
	passg__genpwd $@
	;;
*)
	echo "Unknown command $cmd"
	passg_usage $@
	exit 1
	;;
esac

