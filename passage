#!/usr/bin/sh

set -eu -o noglob


### CONFIG VARIABLES

DIRSUFFIX="pasg"
SIGNATURE_NAMESPACE="passage"
TMPROOT="/dev/shm"
TMPDIR="/dev/shm" # modified on start
LOGFILE="${TMPDIR}/passage.log" # modified on start
EDITOR=${EDITOR:-vi} # YES!
ROOTDIR="." # modified by command line arguments

MYSECKEY="" #"${HOME}/.ssh/id_ed25519"
MYPUBKEY="" # default value modified on start
MYALLOWEDSIGNERS="" #"${HOME}/.config/passage/allowed_signers"


### RUNTIME GLOBAL VARIABLES

STATE_RUNDIR="/tmp" # modified on start
SAVELOG="0"


### HELPER ROUTINES

passage__shred_recursive() {
	# arguments:
	# - dir/filename
	# output: none
	# returns via exit(), run in a subshell!

	local f="$1"
	local dummy
	local frec

	if [ -f "$f" ]; then
		shred "$f"
		rm -f "$f"
		exit 0
	fi

	if [ -d "$f" ]; then
		local d=$(realpath "$f")
		local n=$(find "$f" -type f | wc -l)

		if [ "$n" -gt 10 ]; then
			echo "WARNING: Skipping shredding of $f -- too many files" >&2
			exit 1
		fi

		if [ "$d" = "/" ]; then
			echo "WARNING: Skipping shredding of $f -- it's the root..." >&2
			exit 1
		fi

		find "$d" -type f | while read frec; do
			shred "$frec"
			rm -f "$frec"
		done

		rm -fr "$d"

		exit 0
	fi

	exit 1
}

passage__sighandler() {
	if [ "$SAVELOG" -eq "1" ]; then
		if [ -f "$LOGFILE" ]; then
			cp "$LOGFILE" "$TMPROOT/"
			echo "Log file saved at ${TMPROOT}/$(basename "$LOGFILE")" >&2
		else
			echo "No log file to save" >&2
		fi
	fi
	(passage__shred_recursive "$TMPDIR") || echo "Failed to clean $TMPDIR" >&2
	cd "$STATE_RUNDIR"
}

passage__require_pubkey() {
	# arguments: none
	# uses global MYPUBKEY

	if [ "$MYPUBKEY" = "" ]; then
		echo "Required public key file not set" >&2
		return 1
	fi

	if [ ! -f "$MYPUBKEY" ]; then
		echo "Required public key file not found, tried: $MYPUBKEY" >&2
		return 1
	fi

	return 0
}

passage__require_seckey() {
	# arguments: none
	# uses global MYSECKEY

	if [ "$MYSECKEY" = "" ]; then
		echo "Required secret key file not set" >&2
		return 1
	fi

	if [ ! -f "$MYSECKEY" ]; then
		echo "Required secret key file not found, tried: $MYSECKEY" >&2
		return 1
	fi

	return 0
}

passage__require_allowedsigners() {
	# arguments: none
	# uses global MYALLOWEDSIGNERS

	if [ "$MYALLOWEDSIGNERS" = "" ]; then
		echo "Required allowed signers file not set" >&2
		return 1
	fi

	if [ ! -f "$MYALLOWEDSIGNERS" ]; then
		echo "Required allowed signers file not found, tried: $MYALLOWEDSIGNERS" >&2
		return 1
	fi

	return 0
}


### ATOMIC OPERATIONS

passage_encrypt_secret() {
	# arguments:
	# - secretname
	# - recipients filename

	local secretname="$1"
	local recipients_filename="$2"

	# TODO: check existence / lock file; might also be open for myself
	rm -fr "${secretname}.${DIRSUFFIX}"
	mkdir -p "${secretname}.${DIRSUFFIX}"
	cp "$recipients_filename" "${secretname}.${DIRSUFFIX}/recips"
	passage__require_seckey 
	ssh-keygen -Y sign -f "${MYSECKEY}" -n "${SIGNATURE_NAMESPACE}" \
		"${secretname}.${DIRSUFFIX}/recips" \
		> "$LOGFILE" 2> "$LOGFILE" || {
		echo "ERROR: Signing of recipients file failed" >&2
		return 1
	}
	age -R "${recipients_filename}" > "${secretname}.${DIRSUFFIX}/secret" \
		2> "$LOGFILE" || {
		echo "ERROR: Encryption of secret failed" >&2
		return 1
	}

	return 0
}

passage_show_secret() {
	# arguments:
	# - secretname

	local secretname="$1"

	passage__require_seckey 
	age --decrypt -i "${MYSECKEY}" "${secretname}.${DIRSUFFIX}/secret" \
		2> "$LOGFILE" || {
		echo "ERROR: Decryption of secret failed" >&2
		return 1
	}

	return 0
}

passage_show_recipients() {
	# arguments
	# - secretname

	local signedprincipal
	local isvalidsig="0"
	local secretname="$1"

	passage__require_allowedsigners 

	signedprincipal=$(ssh-keygen -Y find-principals \
		-s "${secretname}.${DIRSUFFIX}/recips.sig" \
		-f "${MYALLOWEDSIGNERS}" 2> "$LOGFILE") || {
		echo "ERROR: Couldn't find the signer's principal in allowed signers list" >&2
		return 1
	}

	ssh-keygen -Y verify -f "${MYALLOWEDSIGNERS}" -I "${signedprincipal}" \
		-n "${SIGNATURE_NAMESPACE}" -s "${secretname}.${DIRSUFFIX}/recips.sig" \
		> "$LOGFILE" 2> "$LOGFILE" < "${secretname}.${DIRSUFFIX}/recips" \
		&& isvalidsig="1"
	# TODO: use option -r revocation_file for ssh-keygen -Y verify

	if [ "$isvalidsig" -ne "1" ]; then
		echo "ERROR: Could not verify signature for recipients list" >&2
		return 1
	fi

	cat "${secretname}.${DIRSUFFIX}/recips"
	
	return 0
}

passage__open_secret() {
	# arguments
	# - secretname
	# output: tmpdir location
	# returns via exit(), run in subshell!

	local secretname="$1"
	local tmpsecret
	tmpsecret="$(mktemp -d -p "$TMPDIR")"

	# Make sure we give the output before
	# potentially exiting due to an error
	echo "$tmpsecret"
	
	passage_show_recipients "$secretname" > "${tmpsecret}/recips" 
	passage_show_secret "$secretname" > "${tmpsecret}/secret.plain" 

	exit 0

	# TODO: add lockfile
}

passage__close_secret() {
	# arguments:
	# - tmpdir location
	# output: none
	# returns via exit(), run in subshell!

	local tmpsecret="$1"

	(passage__shred_recursive "$tmpsecret") || {
		echo "WARNING: Failed to clean $tmpsecret" >&2
		exit 1
	}

	exit 0
	# TODO: remove lockfile
}


### COMBINED OPERATIONS

passage_update_secret() {
	# arguments
	# - secretname

	local secretname="$1"
	local tmpsecret
	tmpsecret=$(passage__open_secret "$secretname") 

	cat > "${tmpsecret}/secret.plain"

	passage_encrypt_secret "$secretname" "${tmpsecret}/recips" \
		< "${tmpsecret}/secret.plain"

	passage__close_secret "$tmpsecret" 
}

passage_modify_secret() {
	# arguments
	# - secretname

	local secretname="$1"
	local tmpsecret
	tmpsecret=$(passage__open_secret "$secretname") 

	"$EDITOR" "${tmpsecret}/secret.plain"

	passage_encrypt_secret "$secretname" "${tmpsecret}/recips" \
		< "${tmpsecret}/secret.plain"

	passage__close_secret "$tmpsecret" 
}

passage_update_recipients() {
	# arguments
	# - secretname

	local secretname="$1"
	local tmpsecret
	tmpsecret=$(passage__open_secret "$secretname") 

	cat > "${tmpsecret}/recips"

	passage_encrypt_secret "$secretname" "${tmpsecret}/recips" \
		< "${tmpsecret}/secret.plain"

	passage__close_secret "$tmpsecret" 
}

passage_modify_recipients() {
	# arguments
	# - secretname

	local secretname="$1"
	local tmpsecret
	tmpsecret=$(passage__open_secret "$secretname")

	"$EDITOR" "${tmpsecret}/recips"

	passage_encrypt_secret "$secretname" "${tmpsecret}/recips" \
		< "${tmpsecret}/secret.plain"

	passage__close_secret "$tmpsecret" 
}


### OTHER SUBROUTINES

passage_list_secrets() {
	# arguments: none

	find "$ROOTDIR" -type d -name "*.${DIRSUFFIX}" | while read d; do
		if [ -f "${d}/secret" ] && [ -f "${d}/recips" ]; then
			local path
			path=${d#"${ROOTDIR}/"}
			path=${path%".pasg"}
			echo "${path}"
		else
			continue
		fi
	done
}

passage_usage() {
	echo "Usage: not yet implemented"
}


### MAIN

TMPDIR="$(mktemp -d -p "$TMPROOT")"
LOGFILE="${TMPDIR}/passage.log"
STATE_RUNDIR=$(pwd)

trap passage__sighandler EXIT


# Command line options - parsing

while getopts 'R:k:p:s:' arg; do
	case $arg in
	k)
		MYSECKEY="$OPTARG"
		;;
	p)
		MYPUBKEY="$OPTARG"
		;;
	R) 
		ROOTDIR="$OPTARG"
		;;
	s)
		MYALLOWEDSIGNERS="$OPTARG"
		;;
	*)
		passage_usage
		exit 1
		;;
	esac
done
shift $((OPTIND-1))


# Options - sanity check
# - sanity of private / public key filenames is checked ad-hoc
# - public key location is guessed here if unset
# - sanity of allowed-signers file is checked ad-hoc

if [ "$MYPUBKEY" = "" ] && [ -f "$MYSECKEY" ]; then
	if [ -f "${MYSECKEY}.pub" ]; then
		MYPUBKEY="${MYSECKEY}.pub"
		echo "Using implicit public key $MYPUBKEY" >&2
	fi
fi

if [ ! -d "$ROOTDIR" ]; then
	echo "Root dir is not a directory" >&2
	exit 1
fi
ROOTDIR=$(realpath $ROOTDIR)
ROOTDIR="${ROOTDIR%"/"}"


# Prepare environment

cd "$ROOTDIR"


# Parse commands

if [ "$#" -lt 1 ]; then
	passage_usage
	exit 1
fi

cmd="$1"
shift

case "$cmd" in
encrypt-secret)
	passage_encrypt_secret $@ 
	;;
show-secret)
	passage_show_secret $@ 
	;;
show-recipients)
	passage_show_recipients $@
	;;
list-secrets)
	passage_list_secrets $@ 
	;;
modify-secret)
	passage_modify_secret $@
	;;
update-secret)
	passage_update_secret $@
	;;
modify-recipients)
	passage_modify_recipients $@ 
	;;
update-recipients)
	passage_update_recipients $@ 
	;;
*)
	echo "Unknown command $cmd"
	passage_usage $@
	exit 1
	;;
esac

